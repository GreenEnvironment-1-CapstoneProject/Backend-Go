basePath: /api/v1
definitions:
  controller.AdminInfoResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  controller.AdminLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controller.AdminLoginResponse:
    properties:
      token:
        type: string
    type: object
  controller.AdminUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  controller.CreateImpactRequest:
    properties:
      description:
        minLength: 1
        type: string
      impact_point:
        minimum: 0
        type: integer
      name:
        minLength: 1
        type: string
    required:
    - description
    - impact_point
    - name
    type: object
  controller.ImpactCategory:
    properties:
      impact_point:
        type: integer
      name:
        type: string
    type: object
  controller.ImpactCategoryResponse:
    properties:
      description:
        type: string
      id:
        type: string
      impact_point:
        type: integer
      name:
        type: string
    type: object
  controller.ProductImage:
    properties:
      image_url:
        type: string
    type: object
  controller.ProductImpactCategory:
    properties:
      impact_category:
        $ref: '#/definitions/controller.ImpactCategory'
    type: object
  controller.ProductRequest:
    properties:
      category_impact:
        items:
          type: string
        type: array
      category_product:
        type: string
      coin:
        minimum: 0
        type: integer
      description:
        type: string
      images:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category_impact
    - category_product
    - coin
    - description
    - images
    - name
    - price
    - stock
    type: object
  controller.ProductResponse:
    properties:
      category_impact:
        items:
          $ref: '#/definitions/controller.ProductImpactCategory'
        type: array
      category_product:
        type: string
      coin:
        type: integer
      created_at:
        type: string
      description:
        type: string
      images:
        items:
          $ref: '#/definitions/controller.ProductImage'
        type: array
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  controller.UserInfoResponse:
    properties:
      address:
        type: string
      avatar_url:
        type: string
      coin:
        type: integer
      email:
        type: string
      exp:
        type: integer
      gender:
        type: string
      id:
        type: string
      is_membership:
        type: boolean
      name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  controller.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controller.UserLoginResponse:
    properties:
      token:
        type: string
    type: object
  controller.UserRegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  controller.UserRegisterResponse:
    properties:
      address:
        type: string
      avatar_url:
        type: string
      coin:
        type: integer
      email:
        type: string
      exp:
        type: integer
      gender:
        type: string
      id:
        type: string
      is_membership:
        type: boolean
      name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  controller.UserUpdateRequest:
    properties:
      address:
        type: string
      email:
        type: string
      gender:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - address
    - email
    - gender
    - name
    - password
    - phone
    - username
    type: object
  controller.UserbyAdminRequest:
    properties:
      address:
        type: string
      gender:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - address
    - gender
    - name
    - phone
    type: object
  controller.UserbyAdminResponse:
    properties:
      address:
        type: string
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: string
      is_membership:
        type: boolean
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  controller.UserbyAdminandPageResponse:
    properties:
      address:
        type: string
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: string
      is_membership:
        type: boolean
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  helper.MetadataResponse:
    properties:
      data: {}
      message:
        type: string
      metadata: {}
      status:
        type: boolean
    type: object
  helper.Response:
    description: Standard API response format
    properties:
      data: {}
      message:
        type: string
      status:
        type: boolean
    type: object
  storages.ImageResponse:
    properties:
      image_url:
        type: string
    type: object
host: https://greenenvironment.my.id
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Swagger server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: capstone project green environment
  version: "1.0"
paths:
  /admin:
    delete:
      consumes:
      - application/json
      description: Remove an admin account from the system
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete successful
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete admin account
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Get admin details based on the JWT token provided
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Admin data retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.AdminInfoResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Retrieve admin details
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Update admin details such as name, username, email, or password
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Admin update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.AdminUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update successful
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid input or validation error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update admin profile
      tags:
      - Admin
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticate admin and generate JWT token
      parameters:
      - description: Admin login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.AdminLoginResponse'
              type: object
        "400":
          description: Invalid input or validation error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Admin login
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of all users (admin access only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.MetadataResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controller.UserbyAdminandPageResponse'
                  type: array
              type: object
        "400":
          description: Invalid page number
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get all users
      tags:
      - Admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user account by ID (admin access only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete user
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Retrieve user information by ID (admin access only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.UserbyAdminResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get user by ID
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Update user information (admin access only)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controller.UserbyAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update user data
      tags:
      - Admin
  /impacts:
    get:
      consumes:
      - application/json
      description: Get a list of all impact categories
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Retrieve impacts successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controller.ImpactCategoryResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Retrieve all impacts
      tags:
      - Impact
    post:
      consumes:
      - application/json
      description: Add a new impact category to the system
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create impact payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.CreateImpactRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Impact created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid input or validation error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create a new impact
      tags:
      - Impact
  /impacts/{id}:
    delete:
      consumes:
      - application/json
      description: Remove an impact category by its ID
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Impact ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Impact deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Impact not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete an impact
      tags:
      - Impact
    get:
      consumes:
      - application/json
      description: Get a specific impact category by its ID
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Impact ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Retrieve impact successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.ImpactCategoryResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Impact not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Retrieve impact by ID
      tags:
      - Impact
  /media/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image to Cloudinary and return the image URL
      parameters:
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Upload success
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/storages.ImageResponse'
              type: object
        "400":
          description: Invalid input or validation error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Upload Image
      tags:
      - Upload
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve all products with pagination.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number
        in: query
        name: pages
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.MetadataResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controller.ProductResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product with associated images and categories. Requires
        admin role.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create a product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a product by its ID. Requires admin role.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Product not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete a product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Retrieve a specific product by its unique identifier.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.ProductResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Product not found
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get a product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update product details including images and categories. Requires
        admin role.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update a product
      tags:
      - Products
  /products/categories/{category_name}:
    get:
      consumes:
      - application/json
      description: Retrieve products by a specific category name with pagination.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category name
        in: path
        name: category_name
        required: true
        type: string
      - description: Page number
        in: query
        name: pages
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.MetadataResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/controller.ProductResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get products by category
      tags:
      - Products
  /users/avatar:
    put:
      consumes:
      - multipart/form-data
      description: Upload a new avatar for the authenticated user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Avatar image
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid input or validation error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update User Avatar
      tags:
      - Users
  /users/delete:
    delete:
      consumes:
      - application/json
      description: Delete the authenticated user's account
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete user account
      tags:
      - Users
  /users/google-callback:
    get:
      description: Handle the OAuth 2.0 callback from Google and authenticate the
        user
      parameters:
      - description: Authorization code from Google
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with JWT token
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.UserLoginResponse'
              type: object
        "400":
          description: Invalid request or missing code
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Google OAuth Callback
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and generate JWT token
      parameters:
      - description: User login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.UserLoginResponse'
              type: object
        "400":
          description: Invalid input or validation error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: User login
      tags:
      - Users
  /users/login-google:
    get:
      description: Redirect to Google's OAuth 2.0 authentication page
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to Google OAuth
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Google Login
      tags:
      - Users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the authenticated user's profile information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.UserInfoResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get user data
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new user account in the system
      parameters:
      - description: User registration payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.UserRegisterResponse'
              type: object
        "400":
          description: Invalid input or validation error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Register a new user
      tags:
      - Users
  /users/update:
    put:
      consumes:
      - application/json
      description: Update the authenticated user's information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  $ref: '#/definitions/controller.UserLoginResponse'
              type: object
        "400":
          description: Invalid input or validation error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/helper.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update user data
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
